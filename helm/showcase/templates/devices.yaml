{{- range $deviceId, $dev := .Values.hardware.devices }}

{{- if not $dev.enabled }}
  # Device not enabled: {{$deviceId}}
{{- else }}
  # Device enabled: {{$deviceId}}
{{- $common := $.Values.hardware.common -}}
{{- $mergedDevice := merge $dev $common }}
  # Getting hook from hookRef: '{{$mergedDevice.hookRef}}'
{{- if not $mergedDevice.hookRef }}{{- fail (printf "Device '%s', hookRef '%s': %s" $deviceId $mergedDevice.hookRef "hookRef unset?") }}{{- end }}

{{- $hookObj := index $.Values.provision.hook $mergedDevice.hookRef }}
{{- if not $hookObj }}{{- fail (printf "Device '%s', hookRef '%s': %s" $deviceId $mergedDevice.hookRef "hookRef not found") }}{{- end }}
  # if the device has a hookOverride property, merge it on top of the hookObj; pre-merge: {{$hookObj.bootMode}}
{{ if $mergedDevice.hookOverride }}
  # YES!!!!!!!!!! has hookOverride {{$deviceId}}
{{ $hookObj = merge $mergedDevice.hookOverride $hookObj }}
{{ else }}
  # NO!!!!!!!!!! no hookOverride {{$deviceId}}
{{ end }}
  # Reboot mode after merge: {{$hookObj.bootMode}}

{{- $imageObj := index $.Values.provision.images $mergedDevice.imageRef }}
{{- if not $imageObj }}{{- (printf "Device '%s', imageRef '%s': %s" $deviceId $mergedDevice.imageRef "imageRef not found") }}{{- end }}
  # Check sanity of arch across device / image / hook - they all must match
  # Device arch: {{$dev.arch}} Image arch: {{$imageObj.arch}} Hook arch: {{$hookObj.arch}}
{{- if ne $imageObj.arch $hookObj.arch }}{{- fail (printf "Device '%s' (imageRef '%s'): '%s'" $deviceId $mergedDevice.imageRef "image and hook arch mismatch") }}{{- end }}
{{- if ne $dev.arch $imageObj.arch }}{{- fail (printf "Device '%s': '%s'" $deviceId "device and image arch mismatch") }}{{- end }}
{{- if ne $dev.arch $hookObj.arch }}{{- fail (printf "Device '%s': '%s'" $deviceId "device and hook arch mismatch") }}{{- end }}
{{- $rootDiskDevice := required (printf "Device '%s' - %s" $deviceId "rootDisk is required") $mergedDevice.rootDisk }}
{{- if not (hasPrefix "/dev" $rootDiskDevice) }}{{- fail (printf "Device '%s' (rootDisk '%s'): '%s'" $deviceId $rootDiskDevice "rootDisk does not begin with /dev") }}{{- end }}
{{- $rootDiskRootfsPartitionNumber := printf "%s" $imageObj.rootfsPartitionNumber }}
  # rootDiskRootfsPartitionNumber is {{$rootDiskRootfsPartitionNumber}}
{{- $rootDiskRootfsPartitionDevice := "unknown" }}
{{- $espPartitionDevice := "unknown" }}
{{- $espPartitionNumber := printf "%s" ($imageObj.espPartitionNumber | default 1 ) }}

{{- if hasPrefix "/dev/disk/" $rootDiskDevice }}
  # YES! {{$rootDiskDevice}} begins with /dev/disk
{{- $rootDiskRootfsPartitionDevice = printf "%s-part%s" $rootDiskDevice $rootDiskRootfsPartitionNumber  }}
{{- $espPartitionDevice = printf "%s-part%s" $rootDiskDevice $espPartitionNumber  }}
{{- else }}
  # NO! {{$rootDiskDevice}} does not begin with /dev/disk
{{- if regexMatch "[0-9]$" $rootDiskDevice }}
  # YES! {{$rootDiskDevice}} ends with a digit - REGEX MATCH
{{- $rootDiskRootfsPartitionDevice = printf "%sp%s" $rootDiskDevice $rootDiskRootfsPartitionNumber  }}
{{- $espPartitionDevice = printf "%sp%s" $rootDiskDevice $espPartitionNumber  }}
{{- else }}
  # NO! {{$rootDiskDevice}} does not end with a digit - REGEX NOT MATCH
{{- $rootDiskRootfsPartitionDevice = printf "%s%s" $rootDiskDevice $rootDiskRootfsPartitionNumber  }}
{{- $espPartitionDevice = printf "%s%s" $rootDiskDevice $espPartitionNumber  }}
{{- end }}
{{- end }}
  # Thus at the end of the day, $rootDiskRootfsPartitionDevice is {{$rootDiskRootfsPartitionDevice}} and ESP is {{$espPartitionDevice}}
---
apiVersion: "tinkerbell.org/v1alpha1"
kind: Hardware
metadata:
  name: "{{ $deviceId }}-hardware"
  {{- if $.Values.forceNamespace }}
  namespace: "{{ $.Values.forceNamespace }}"
  {{- end }}
  labels:
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/part-of": "tinkerbell-showcase"
    "tinkerbell.showcase/deviceId": "{{ $deviceId }}"
    "tinkerbell.showcase/imageRef": "{{ $mergedDevice.imageRef }}"
    "tinkerbell.showcase/hookRef": "{{ $mergedDevice.hookRef }}"
spec:
  disks:
    - device: "{{ $rootDiskDevice }}"
  userData: |
    {{- $mergedDevice.userData | default "#!/bin/bash\necho 'tinkerbell-showcase: userData not configured for device' >&2;" | nindent 4 }}
  metadata:
    facility:
      facility_code: tinkerbell-showcase
      plan_slug: "{{$deviceId}}"
    instance:
      hostname: "{{ $deviceId }}"
      id: "{{ $dev.mac }}"
      tags:
        - "tinkerbell-showcase"
      operating_system:
        distro: "ubuntu" # @TODO
        image_tag: "latest"
        slug: "ubuntuslug"
        os_slug: "ubuntu_24_04"
        version: "24.04"
  interfaces:
    - dhcp:
        arch: "{{ $dev.arch }}"
        hostname: "{{ $deviceId }}"
        ip:
          address: "{{ $dev.ipv4.address }}"
          netmask: "{{ $dev.ipv4.netmask }}"
          gateway: "{{ $dev.ipv4.gateway }}"
        lease_time: 86400
        mac: "{{ $dev.mac }}"
        name_servers:
          {{- range $mergedDevice.ipv4.dns }}
          - {{ . | quote }}
          {{- end }}
        uefi: {{ $dev.uefi }}
        time_servers:
          {{- range $mergedDevice.ipv4.time_servers }}
          - {{ . | quote }}
          {{- end }}
      netboot:
        allowPXE: true
        allowWorkflow: true
        ipxe: # @TODO
          contents: |
            echo Showcase starting for {{$deviceId}} with hook {{$mergedDevice.hookRef}} and image {{$mergedDevice.imageRef}}...
            set download-url {{ $.Values.tinkerbell.hookURL }}
            set kernel-params tink_worker_image={{ $.Values.tinkerbell.tinkWorkerImagePrefix }}{{ $.Values.tinkerbell.tinkWorkerImage }} facility= syslog_host={{ $.Values.tinkerbell.syslogHost }} grpc_authority={{ $.Values.tinkerbell.grpcAuthority }} tinkerbell_tls={{ $.Values.tinkerbell.grpcTLS }} tinkerbell_insecure_tls={{ $.Values.tinkerbell.grpcInsecureTLS }} worker_id={{$dev.mac}} hw_addr={{$dev.mac}} {{ if $.Values.tinkerbell.insecureRegistries.enabled }}insecure_registries={{ $.Values.tinkerbell.insecureRegistries.registries }} {{end}} modules=loop,squashfs,sd-mod,usb-storage initrd={{ $hookObj.initrd }} {{$hookObj.kernelCommandLine}} {{ $dev.extraKernelCommandLine }}
            echo Kernel image: ${download-url}/{{ $hookObj.kernel }}
            echo Kernel initrd: ${download-url}/{{ $hookObj.initrd }}
            echo Kernel cmdline: ${kernel-params}
            kernel ${download-url}/{{ $hookObj.kernel }} ${kernel-params}
            initrd ${download-url}/{{ $hookObj.initrd }}
            imgstat
            boot
---
apiVersion: "tinkerbell.org/v1alpha1"
kind: Template
metadata:
  name: "{{ $deviceId }}-template"
  {{- if $.Values.forceNamespace }}
  namespace: "{{ $.Values.forceNamespace }}"
  {{- end }}
  labels:
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/part-of": "tinkerbell-showcase"
spec:
  data: |
    version: "0.1"
    name: "{{ $deviceId }}-template"
    global_timeout: 1800
    tasks:
      - name: "os-installation-{{ $deviceId }}"
        worker: "{{ $dev.mac }}"
        volumes:
          - /dev:/dev
          - /dev/console:/dev/console
          - /lib/firmware:/lib/firmware:ro

        actions:
          - name: "stream-image-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/image2disk:{{ $.Values.actions.version }}
            timeout: 600
            environment:
              DEST_DISK: "{{ $rootDiskDevice }}"
              IMG_URL: "{{ $.Values.tinkerbell.imagesURL }}/{{ $imageObj.image }}"
              {{- if not (regexMatch "-nogz$" $imageObj.conversion) }}
              COMPRESSED: true # because {{ $imageObj.conversion }}
              {{- else }}
              COMPRESSED: false # cos {{ $imageObj.conversion }}
              {{- end }}

          {{- if $imageObj.doGrowPart }}
          - name: "grow-partition-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{ $rootDiskRootfsPartitionDevice }}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "growpart {{ $rootDiskDevice }} {{$rootDiskRootfsPartitionNumber}} && resize2fs {{$rootDiskRootfsPartitionDevice}}"
          {{- end }}

          {{- if ($imageObj.doFixResolvConf)  }}
          - name: "fix-resolv-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "echo 'list /etc/resolv.conf: '; ls -la /etc/resolv.conf; echo 'cat /etc/resolv.conf'; cat /etc/resolv.conf; echo 'moving...'; mv -v /etc/resolv.conf /etc/resolv.conf.orig.tink; echo 'nameserver {{ index $mergedDevice.ipv4.dns 0 }} ' > /etc/resolv.conf; echo 'new resolf.conf:' ; cat /etc/resolv.conf"
          {{- end }}


          {{- if $imageObj.doUserAndSshSetup }}
          - name: "install-packages-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 180 # 3 minutes
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "apt -y update && DEBIAN_FRONTEND=noninteractive apt -y install openssl neofetch --no-install-recommends --no-install-suggests"
          - name: "create-user-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "useradd -p $(openssl passwd -1 tink) -s /bin/bash -d /home/tink/ -m -G sudo tink"
          - name: "enable-ssh-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "ssh-keygen -A; systemctl enable ssh.service; echo 'PasswordAuthentication yes' > /etc/ssh/sshd_config.d/60-cloudimg-settings.conf"
          - name: "disable-apparmor-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "systemctl disable apparmor; systemctl disable snapd"
          - name: "write-netplan-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/writefile:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              DEST_DISK: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              DEST_PATH: /etc/netplan/config.yaml
              CONTENTS: |
                network:
                  version: 2
                  renderer: networkd
                  ethernets:
                    id0:
                      match:
                        name: e*
                      dhcp4: true
              UID: 0
              GID: 0
              MODE: 0644
              DIRMODE: 0755
          {{- end }}

          {{- if ($imageObj.doInjectHegelCloudInit )  }}
          # Based on https://tinkerbell.org/docs/integrations/cloudinit/#setup-cloud-init-to-use-hegel
          - name: "inject-cloud-init-hegel-cfg-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/writefile:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              DEST_PATH: /etc/cloud/cloud.cfg.d/10_tinkerbell.cfg
              CONTENTS: |
                datasource:
                  Ec2:
                    metadata_urls: ["{{ $.Values.tinkerbell.hegelURL }}"]
                    strict_id: false
                manage_etc_hosts: localhost
                warnings:
                  dsid_missing_source: off      
              DEST_DISK: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              UID: 0
              GID: 0
              MODE: 0600
              DIRMODE: 0700

          - name: "inject-cloud-init-hegel-ds-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/writefile:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              DEST_PATH: /etc/cloud/ds-identify.cfg
              CONTENTS: |
                datasource: Ec2
              DEST_DISK: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              UID: 0
              GID: 0
              MODE: 0600
              DIRMODE: 0700
          {{- end }}

          {{- if ($imageObj.doFixResolvConf )  }}
          - name: "revert-fix-resolv-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/sh -c"
              CMD_LINE: "rm -v /etc/resolv.conf; mv -v /etc/resolv.conf.orig.tink /etc/resolv.conf"
          {{- end }}

          {{- if ($imageObj.doAddEFIBootEntry )  }}
          - name: "add-efi-boot-entry-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/bash -c"
              CMD_LINE: "set -x; mount; lsblk; blkid; mount -o remount,rw /sys; mount -t efivarfs none /sys/firmware/efi/efivars; mount; efibootmgr --verbose; efibootmgr --create --disk '{{ $rootDiskDevice }}' --label PROViSiONED; efibootmgr --verbose; umount /sys/firmware/efi/efivars; sync"
          {{- end }}

          {{- if ($imageObj.doRestoreGRUBNormalcy )  }}
          - name: "restore-grub-normalcy-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/bash -c"
              CMD_LINE: "set -x; mount; lsblk; blkid; mount -o remount,rw /sys; mount -t efivarfs none /sys/firmware/efi/efivars; mount '{{ $espPartitionDevice }}' /boot; mount; rm -rfv /boot/ubuntu /boot/loader /boot/EFI; mkdir -pv /boot/EFI; update-initramfs -k all -c; echo 'GRUB_CMDLINE_LINUX_DEFAULT=\"${GRUB_CMDLINE_LINUX_DEFAULT} {{$mergedDevice.extraKernelCommandLine}}\"' > /etc/default/grub.d/60-provisioned.cfg; cat /etc/default/grub.d/60-provisioned.cfg; mv -v /etc/os-release /etc/os-release.hold; echo 'NAME={{$mergedDevice.imageRef}}' > /etc/os-release; grub-install --efi-directory /boot '--bootloader-id={{$mergedDevice.imageRef}}'; update-grub; tree /boot; cat /boot/grub/grub.cfg; efibootmgr --verbose; umount /sys/firmware/efi/efivars; umount /boot; mv -v /etc/os-release.hold /etc/os-release; sync"
          {{- end }}

          {{- if ($imageObj.doRestoreGRUBNormalcySeparateESP )  }}
          - name: "restore-grub-normalcy-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/cexec:{{ $.Values.actions.version }}
            timeout: 90
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              CHROOT: y
              DEFAULT_INTERPRETER: "/bin/bash -c"
              CMD_LINE: |
                set -x
                set -e
                mount
                lsblk || true
                blkid || true
                mount -o remount,rw /sys
                mount -t efivarfs none /sys/firmware/efi/efivars
                mount '{{ $espPartitionDevice }}' /boot/efi
                mount
                rm -rfv /boot/efi/ubuntu /boot/efi/loader /boot/efi/EFI
                mkdir -pv /boot/efi/EFI
                update-initramfs -k all -c
                echo 'GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_DEFAULT} {{$mergedDevice.extraKernelCommandLine}}" # Added "{{$mergedDevice.extraKernelCommandLine}}" by tinkerbell action' > /etc/default/grub.d/99-provisioned.cfg
                ls -lat /etc/default/grub.d
                cat /etc/default/grub.d/99-provisioned.cfg
                mv -v /etc/os-release /etc/os-release.hold
                echo 'NAME={{$mergedDevice.imageRef}}' > /etc/os-release
                grub-install --efi-directory /boot/efi '--bootloader-id={{$mergedDevice.imageRef}}'
                update-grub || { echo 'update-grub failed! showing /boot/grub/grub.cfg.new'; cat /boot/grub/grub.cfg.new || true; echo 'update-grub failed!'; exit 66; }
                tree /boot || true
                cat /boot/grub/grub.cfg
                efibootmgr --verbose || true
                umount /sys/firmware/efi/efivars
                umount /boot/efi
                mv -v /etc/os-release.hold /etc/os-release
                sync
          {{- end }}

          {{- if eq $hookObj.bootMode "kexec" }}
          - name: "kexec-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/waitdaemon:{{ $.Values.actions.version }}
            timeout: 90
            pid: host
            environment:
              BLOCK_DEVICE: {{$rootDiskRootfsPartitionDevice}}
              FS_TYPE: ext4
              IMAGE: {{ $.Values.actions.repository }}/kexec:{{ $.Values.actions.version }}
              WAIT_SECONDS: 0
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
          {{- end }}

          {{- if eq $hookObj.bootMode "reboot" }}
          - name: "reboot-{{ $deviceId }}"
            image: {{ $.Values.actions.repository }}/waitdaemon:{{ $.Values.actions.version }}
            timeout: 90
            pid: host
            command: ["reboot"]
            environment:
              IMAGE: alpine
              WAIT_SECONDS: 0
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
          {{- end }}
---
{{- if $.Values.workflows.enabled }}
apiVersion: "tinkerbell.org/v1alpha1"
kind: Workflow
metadata:
  name: "{{ $deviceId }}-workflow"
  {{- if $.Values.forceNamespace }}
  namespace: "{{ $.Values.forceNamespace }}"
  {{- end }}
  labels:
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/part-of": "tinkerbell-showcase"
spec:
  templateRef: "{{ $deviceId }}-template"
  hardwareRef: "{{ $deviceId }}-hardware"
  hardwareMap:
    device_1: "{{ $dev.mac }}"
{{- end }}
{{- end }}
{{- end }}
