{{- if .Values.jobs.enabled }}
{{- if .Values.jobs.images.enabled }}
{{- range $imageObjId, $imageObj := .Values.provision.images }}
  {{- $common := $.Values.provision.common -}}
  {{- $imageObj = merge $imageObj $common }}
  {{- if or (not $imageObj.downloadURL) (not $imageObj.image) (not $imageObj.conversion) }}
    {{- $tmpDownFn := (printf "%s%s_%s_%s_%s-%s%s" $imageObj.armbianImageVendor $imageObj.armbianImageRevision $imageObj.armbianImageBoard $imageObj.armbianImageRelease $imageObj.armbianImageBranch $imageObj.armbianImageVariant $imageObj.armbianImageFormat) }}
    {{- $tmpDownUrl := (printf "https://github.com/%s/releases/download/%s/%s.xz" $imageObj.armbianImageOwnerRepo $imageObj.armbianImageRevision $tmpDownFn) }}
    {{- $imageObj = merge (dict "conversion" $imageObj.armbianImageConversion "image" (printf "%s.gz" $tmpDownFn) "downloadURL" $tmpDownUrl) $imageObj }}
  {{- end }}
---
# --> ImageId: {{ $imageObjId }}
  # downloadUrl: "{{ $imageObj.downloadURL }}"
  # image: "{{ $imageObj.image }}"
  # conversion: "{{ $imageObj.conversion }}"
{{- $hash :=  trunc 8 (sha1sum (printf "%s-%s-%s" $imageObj.downloadURL $imageObj.image $imageObj.conversion )) }}
# Loop over $.Values.hardware.devices (a dictionary) and for each value, check if it's imageRef matches this $imageObjId - if so, enable this image.
{{- $enabledByDeviceUsage := false }}
{{- range $device := $.Values.hardware.devices }}
# Testing {{$device.imageRef}} against {{$imageObjId}}...
{{- if and $device.enabled (eq $device.imageRef $imageObjId) -}}
# YES!
{{- $enabledByDeviceUsage = true -}}
{{- else -}}
# NO!
{{- end -}}
{{- end }}
{{- if or $enabledByDeviceUsage $imageObj.enabled }}
# ImageId: {{ $imageObjId }} - force enabled? {{ $imageObj.enabled }} -- enabled by device usage? {{ $enabledByDeviceUsage }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "download-image-{{$imageObjId}}-{{$hash}}"
  {{- if $.Values.forceNamespace }}
  namespace: "{{ $.Values.forceNamespace }}"
  {{- end }}
  labels:
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/part-of": "tinkerbell-showcase"
data:
  entrypoint.sh: |-
    #!/usr/bin/env bash
    set -euxo pipefail
    cat > /etc/apk/repositories << EOF; $(echo)
    https://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/main/
    https://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/community/
    https://dl-cdn.alpinelinux.org/alpine/edge/community/
    EOF
    {{- if eq "qemu-to-raw-gzip" $imageObj.conversion }}
    # This script is designed to download a cloud image file (.img) and then convert it to a .raw.gz file.
    # This is purpose built so non-raw cloud image files can be used with the "image2disk" action.
    # See https://artifacthub.io/packages/tbaction/tinkerbell-community/image2disk.
    image_url=$1
    file=$2/${image_url##*/}
    file=${file%.*}.raw.gz
    if [[ ! -f "$file" ]]; then
        echo "Image file $file does not exist. Downloading...."
        apk add --update pigz qemu-img
        wget "$image_url" -O image.img
        qemu-img convert -O raw image.img image.raw
        pigz < image.raw > "$file"
        rm -f image.img image.raw
    else
        echo "File $file already exists, skipping download and conversion."
    fi
    {{- end }}

    {{- if eq "none" $imageObj.conversion }}
    # No conversion, just a simple download; image must be in raw format, possibly compressed.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Image file $file does not exist. Downloading...."
      wget "$image_url" -O "${file}.tmp"
      mv -v "${file}.tmp" "$file"
      echo "Done downloading image."  
    else
      echo "Image file $file already exists. Skipping download."
    fi
    {{- end }}

    {{- if eq "xz-to-gz" $imageObj.conversion }}
    # Download, then produce a .gz file from a .xz file, using pigz and pixz, and using a pipe.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Image file $file does not exist. Downloading...."
      apk add --update pigz pixz
      wget "$image_url" -O "${file}.tmp.xz"
      echo "Done downloading image. Converting from xz to gz..."  
      pixz -d < "${file}.tmp.xz" | pigz > "${file}.tmp"  
      mv -v "${file}.tmp" "$file"
      echo "Done converting image."
      rm -f "${file}.tmp.xz"
    else
      echo "Image file $file already exists. Skipping download."
    fi
    {{- end }}

    {{- if eq "xz-qcow2-to-img-gz" $imageObj.conversion }}
    # Download, decompress xz, convert qcow2 to img, compress img to gz.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Image file $file does not exist. Downloading...."
      apk add --update pigz pixz qemu-img
      wget "$image_url" -O "${file}.tmp.xz"
      echo "Done downloading image. Decompressing xz..."  
      pixz -d < "${file}.tmp.xz" > "${file}.tmp.unxz"
      rm -v "${file}.tmp.xz"
      echo "Done decompressing xz, converting qcow2 to img..."
      qemu-img convert -O raw "${file}.tmp.unxz" "${file}.tmp.raw"
      rm -v "${file}.tmp.unxz"
      echo "Done converting qcow2 to img, compressing img to gz..."
      pigz < "${file}.tmp.raw" > "${file}"
      rm -v "${file}.tmp.raw"
      echo "Done converting image."
    else
      echo "Image file $file already exists. Skipping download."
    fi
    {{- end }}

    {{- if eq "xz-qcow2-to-img-nogz" $imageObj.conversion }}
    # Download, decompress xz, convert qcow2 to img, NO compression of final artifact.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Image file $file does not exist. Downloading...."
      apk add --update pigz pixz qemu-img
      wget "$image_url" -O "${file}.tmp.xz"
      echo "Done downloading image. Decompressing xz..."  
      pixz -d < "${file}.tmp.xz" > "${file}.tmp.unxz"
      rm -v "${file}.tmp.xz"
      echo "Done decompressing xz, converting qcow2 to img..."
      qemu-img convert -O raw "${file}.tmp.unxz" "${file}.tmp.raw"
      rm -v "${file}.tmp.unxz"
      echo "Done converting qcow2 to img, doing NO COMPRESSION of final artifact..."
      mv "${file}.tmp.raw" "${file}"
      echo "Done converting image."
    else
      echo "Image file $file already exists. Skipping download."
    fi
    {{- end }}

    {{- if eq "download-only" $imageObj.conversion }}
    # Download only. Image is already in format necessary.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Download-only Image file $file does not exist. Downloading...."
      wget "$image_url" -O "${file}.tmp"
      echo "Done downloading image. Moving..."
      mv -v "${file}.tmp" "$file"  
      echo "Done moving image."
      rm -f "${file}.tmp.xz"
    else
      echo "Download-only image file $file already exists. Skipping download."
    fi
    {{- end }}

    {{- if eq "local" $imageObj.conversion }}
    # Not even download anything. Image should be in there already somehow.
    image_url="{{ $imageObj.downloadURL }}"
    file="/output/{{ $imageObj.image }}"
    if [[ ! -f "$file" ]]; then
      echo "Image file $file does not exist. Please deploy image file manually, or use a different conversion than none. Sleeping 10s and exiting with error 66."
      sleep 10
      exit 66
    else
      echo "No-conversion image file $file already exists. Ready to use."
    fi
    {{- end }}
    
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "download-image-{{$imageObjId}}-{{$hash}}"
  {{- if $.Values.forceNamespace }}
  namespace: "{{ $.Values.forceNamespace }}"
  {{- end }}
  labels:
    "app.kubernetes.io/instance": "{{ $.Release.Name }}"
    "app.kubernetes.io/part-of": "tinkerbell-showcase"
spec:
  template:
    metadata:
      labels:
        "app.kubernetes.io/instance": "{{ $.Release.Name }}"
        "app.kubernetes.io/part-of": "tinkerbell-showcase"
    spec:
      {{- if $.Values.jobs.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := $.Values.jobs.nodeSelector }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: download-{{$imageObjId}}
          image: bash:5
          command: [ "/script/entrypoint.sh" ]
          args:
            [
              "{{$imageObj.downloadURL}}",
              "/output",
            ]
          volumeMounts:
            - mountPath: /output
              name: image-artifacts
            - mountPath: /script
              name: configmap-volume
      restartPolicy: OnFailure
      volumes:
        - name: image-artifacts
          hostPath:
            path: {{ $.Values.tinkerbell.hostDirectory }}
            type: DirectoryOrCreate
        - name: configmap-volume
          configMap:
            defaultMode: 0700
            name: "download-image-{{$imageObjId}}-{{$hash}}"
{{- else }}
# ImageId: {{ $imageObjId }} DISABLED - force enabled? {{ $imageObj.enabled }} -- enabled by device usage? {{ $enabledByDeviceUsage }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
