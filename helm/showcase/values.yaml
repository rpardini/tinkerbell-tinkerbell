# Basic information on how Tinkerbell is setup.
tinkerbell:
  hostDirectory: "/opt/hook" # hostPath where Hook & images are downloaded & served from
  imagesURL: "http://192.168.0.43:8080" # # URL where images are served from
  hegelURL: "http://192.168.0.43:32061" # Hegel URL

actions:
  repository: "quay.io/tinkerbellrpardini/actions" # rpardini's fork with some fixes for arm64
  version: "latest"

jobs:
  enabled: false # false to completely skip generating jobs
  nodeSelector: null # or an object with keys and values for NodeSelector
  hooks:
    enabled: true # enable hook download jobs? (depends on jobs.enabled too)
  images:
    enabled: true # enable image download jobs? (depends on jobs.enabled too)

workflows:
  enabled: true # false to completely skip generating Tinkerbell Workflow CRs; Hardware and Templates are still generated

forceNamespace: null # or a string to force all resources to be created in a specific namespace

# Generates download jobs and configs for easy show-off'ing of Tinkerbell on diverse hardware
provision:
  # @TODO: many simultaneous download jobs can drive an SD-card/low-bandwidth cluster to its knees. Consider a single download job for all
  
  common:
    # Used together with downloadFile field in each hook;
    # Check https://github.com/rpardini/tinkerbell-hook/releases/ for updates
    hookDownloadBaseURL: "https://github.com/rpardini/tinkerbell-hook/releases/download/20250328-0518/"
    hookDownloadId: "20250328-0518" # If the ID changes, all hooks will be re-downloaded. Can't contain slashes or spaces
  
  # Define one key per hook built to be downloaded and made available. Those _must_ match the hardware definitions.
  # Important: each definition will be auto-enabled when they're referenced in an enabled device. You can force them enabled: true
  # to download/prepare it even if no device is using it.
  hook:
    "armbian-rockchip64-edge":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-rockchip64-edge.tar.gz"
      kernel: "vmlinuz-armbian-rockchip64-edge"
      initrd: "initramfs-armbian-rockchip64-edge"
      kernelCommandLine: ""
      bootMode: reboot
    
    "armbian-bcm2711-current":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-bcm2711-current.tar.gz"
      kernel: "vmlinuz-armbian-bcm2711-current"
      initrd: "initramfs-armbian-bcm2711-current"
      kernelCommandLine: ""
      bootMode: reboot

  # Define deployment images; we've a few examples using Ubuntu and Armbian
  # Important: each definition will be auto-enabled when they're referenced in an enabled device. You can force them enabled: true
  # to download/prepare it even if no device is using it.
  images:
    "quartz64a-k8s":
      enabled: false
      arch: "aarch64"
      downloadURL: "https://github.com/armsurvivors/armbian-release/releases/download/25.03.25-armsurvivors-870/Armbian-unofficial_25.03.25-armsurvivors-870_Quartz64a_bookworm_edge_6.14.0-metadata-cloud-k8s-1.30.img.xz"
      image: "Armbian-unofficial_25.03.25-armsurvivors-870_Quartz64a_bookworm_edge_6.14.0-metadata-cloud-k8s-1.30.img"
      conversion: "xz-qcow2-to-img-nogz" # @TODO: why nogz?!
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "1" # rootfs is the one and only

    "rpi4b-k8s":
      enabled: false
      arch: "aarch64"
      downloadURL: "https://github.com/armsurvivors/armbian-release/releases/download/25.03.25-armsurvivors-870/Armbian-unofficial_25.03.25-armsurvivors-870_Rpi4b_bookworm_current_6.12.20-metadata-cloud-k8s-1.30.img.xz"
      image: "Armbian-unofficial_25.03.25-armsurvivors-870_Rpi4b_bookworm_current_6.12.20-metadata-cloud-k8s-1.30.img.gz"
      conversion: "xz-qcow2-to-img-gz"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "2" # rpi image has a fat32 boot partition (config.txt and such), and partition 2 is the real ext4 rootfs

# Generates CRs triplets with Hardware, Workflow, and Template, using by-id references to the hook and images above.

hardware:
  devices: # One entry for each machine

    "quartz64a":
      enabled: true
      arch: aarch64
      mac: "quartz64a" # not really a MAC, instead an ID
      rootDisk: "/dev/disk/by-id/nvme-SOMETHING-SOMETHING"
      hookRef: "armbian-rockchip64-edge"
      imageRef: "quartz64a-k8s"
      extraKernelCommandLine: "console=ttyS2,1500000"
      userData: |
        #include https://cloud-init.pardini.net.br/rpardini/oldskool-rpardini/master/base_from_hegel

    # Raspberry Pi 4B (bcm2711)
    "rpi4b":
      enabled: false
      arch: aarch64
      mac: "rpi4b"
      rootDisk: "/dev/disk/by-id/sata-SOMETHING-SOMETHING"
      hookRef: "armbian-bcm2711-current"
      imageRef: "rpi4b-k8s"
      extraKernelCommandLine: "console=tty1 console=ttyAMA0,115200 loglevel=7" # Last console defined "wins", thus use tty1 last if no serial console
      userData: |
        #include https://cloud-init.pardini.net.br/rpardini/oldskool-rpardini/master/base_from_hegel

