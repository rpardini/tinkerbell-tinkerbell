# Basic information on how Tinkerbell is setup.
tinkerbell:
  hostDirectory: "/opt/hook" # hostPath where Hook & images are downloaded & served from
  imagesURL: "http://192.168.66.170:32083" # # URL where images are served from
  hegelURL: "http://192.168.66.170:50061" # Hegel URL

actions:
  repository: "quay.io/tinkerbellrpardini/actions" # rpardini's fork with some fixes for arm64
  version: "latest"

jobs:
  enabled: false # false to completely skip generating jobs
  nodeSelector: null # or an object with keys and values for NodeSelector
  hooks:
    enabled: true # enable hook download jobs? (depends on jobs.enabled too)
  images:
    enabled: true # enable image download jobs? (depends on jobs.enabled too)

workflows:
  enabled: true # false to completely skip generating Tinkerbell Workflow CRs; Hardware and Templates are still generated

forceNamespace: null # or a string to force all resources to be created in a specific namespace

# Generates download jobs and configs for easy show-off'ing of Tinkerbell on diverse hardware
provision:
  # @TODO: many simultaneous download jobs can drive an SD-card/low-bandwidth cluster to its knees. Consider a single download job for all

  common:
    # Used together with downloadFile field in each hook;
    # Check https://github.com/rpardini/tinkerbell-hook/releases/ for updates
    hookDownloadBaseURL: "https://github.com/rpardini/tinkerbell-hook/releases/download/20250414-0518/"
    hookDownloadId: "20250503-0518" # If the ID changes, all hooks will be re-downloaded. Can't contain slashes or spaces

    armbianImageOwnerRepo: "armsurvivors/armbian-release" # https://github.com/armsurvivors/armbian-release
    armbianImageRevision: "25.09.03-1117"
    armbianImageRelease: "trixie" # bookworm is oldstable already, move on
    armbianImageFormat: ".img" # raw=.img, qcow2=.img.qcow2
    armbianImageVendor: "Armbian-armsurvivors_"
    armbianImageConversion: "xz-qcow2-to-img-gz"

  # Define one key per hook built to be downloaded and made available. Those _must_ match the hardware definitions.
  # Important: each definition will be auto-enabled when they're referenced in an enabled device. You can force them enabled: true
  # to download/prepare it even if no device is using it.
  hook:
    "armbian-rockchip64-edge":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-rockchip64-edge.tar.gz"
      kernel: "vmlinuz-armbian-rockchip64-edge"
      initrd: "initramfs-armbian-rockchip64-edge"
      kernelCommandLine: ""
      bootMode: reboot

    "armbian-rk35xx-vendor":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-rk35xx-vendor.tar.gz"
      kernel: "vmlinuz-armbian-rk35xx-vendor"
      initrd: "initramfs-armbian-rk35xx-vendor"
      kernelCommandLine: "" # acpi=off efi=noruntime splash=verbose
      bootMode: reboot

    "armbian-bcm2711-current":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-bcm2711-current.tar.gz"
      kernel: "vmlinuz-armbian-bcm2711-current"
      initrd: "initramfs-armbian-bcm2711-current"
      kernelCommandLine: ""
      bootMode: reboot

    "armbian-meson64-edge":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_armbian-meson64-edge.tar.gz"
      kernel: "vmlinuz-armbian-meson64-edge"
      initrd: "initramfs-armbian-meson64-edge"
      kernelCommandLine: "acpi=off efi=noruntime"
      bootMode: reboot

    "default-hook-amd64":
      enabled: false
      arch: "x86_64"
      downloadFile: "hook_x86_64.tar.gz"
      kernel: "vmlinuz-x86_64"
      initrd: "initramfs-x86_64"
      kernelCommandLine: ""
      bootMode: reboot

    "default-hook-aarch64":
      enabled: false
      arch: "aarch64"
      downloadFile: "hook_aarch64.tar.gz"
      kernel: "vmlinuz-aarch64"
      initrd: "initramfs-aarch64"
      kernelCommandLine: ""
      bootMode: reboot # kexec is no-go here, kernel problem? (persists after enabling CONFIG_KEXEC & trying to fix TB action)

  # Define deployment images; we've a few examples using Ubuntu and Armbian
  # Important: each definition will be auto-enabled when they're referenced in an enabled device. You can force them enabled: true
  # to download/prepare it even if no device is using it.
  images:
    "nanopct6lts-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "nanopct6-lts"
      armbianImageBranch: "edge"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "1" # rootfs is the one and only
      # What about extraKernelCommandLine -- @TODO how to inject it into /boot/armbianEnv.txt extraargs?

    "blade3-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "mixtile-blade3"
      armbianImageBranch: "vendor"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "1" # rootfs is the one and only

    "quartz64a-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "quartz64a"
      armbianImageBranch: "edge"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "1" # rootfs is the one and only
      # What about extraKernelCommandLine -- @TODO how to inject it into /boot/armbianEnv.txt extraargs?

    "odroidhc4-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "odroidhc4"
      armbianImageBranch: "edge"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "1" # rootfs is the one and only
      # What about extraKernelCommandLine -- @TODO how to inject it into /boot/armbianEnv.txt extraargs?

    "rpi4b-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "rpi4b"
      armbianImageBranch: "current"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "2" # rpi image has a fat32 boot partition (config.txt and such), and partition 2 is the real ext4 rootfs

    "amd64-k8s":
      enabled: false
      arch: "x86_64"
      armbianImageBoard: "uefi-x86"
      armbianImageBranch: "edge"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      armbianImageFormat: ".img.qcow2"
      armbianImageConversion: "xz-qcow2-to-img-gz"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true
      rootfsPartitionNumber: "3" #  1 is BIOS GRUB partition thing, 2 is ESP, 3 rootfs
      espPartitionNumber: "2"
      doRestoreGRUBNormalcySeparateESP: true # rebuilts initrd and configs GRUB with extra kernel command line options; installs grub to EFI nvram

    "arm64-k8s":
      enabled: false
      arch: "aarch64"
      armbianImageBoard: "uefi-arm64"
      armbianImageBranch: "edge"
      armbianImageVariant: "metadata-cloud-k8s-1.32"
      armbianImageFormat: ".img.qcow2"
      armbianImageConversion: "xz-qcow2-to-img-gz"
      doGrowPart: false # Armbian does it itself when booted
      doUserAndSshSetup: false # Armbian does it itself when booted
      doFixResolvConf: false
      doInjectHegelCloudInit: true # yes, with token
      rootfsPartitionNumber: "2" #  1 is ESP, 2 rootfs 1 - no BIOS thing for arm64
      espPartitionNumber: "1"
      doRestoreGRUBNormalcySeparateESP: true # rebuilts initrd and configs GRUB with extra kernel command line options; installs grub to EFI nvram

# Generates CRs triplets with Hardware, Workflow, and Template, using by-id references to the hook and images above.
hardware:
  #common:
  #  uefi: true
  #  ipv4:
  #    gateway: "192.168.66.1" # Must be set, otherwise no internet access; can be overriden per-device
  #    netmask: "255.255.255.0"
  #    dns: [ "192.168.66.1" ]
  #    time_servers: [ "192.168.66.1" ]

  devices: # One entry for each machine

    "quartz64a":
      enabled: false
      arch: aarch64
      mac: "quartz64a" # not really a MAC, instead an ID
      rootDisk: "/dev/disk/by-id/nvme-SOMETHING-SOMETHING"
      hookRef: "armbian-rockchip64-edge"
      imageRef: "quartz64a-k8s"
      extraKernelCommandLine: "console=ttyS2,1500000"
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/quartz64a_tinkerbell_l3

    "odroidhc4":
      enabled: false
      arch: aarch64
      mac: "odroidhc4" # not really a MAC, instead an ID
      rootDisk: "/dev/disk/by-id/sata-SOMETHING-SOMETHING"
      hookRef: "armbian-rockchip64-edge"
      imageRef: "odroidhc4-k8s"
      extraKernelCommandLine: "console=ttyAML0,115200"
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/odroidhc4_tinkerbell_l3

    "nanopct6lts":
      enabled: false
      arch: aarch64
      mac: "nanopct6lts" # not really a MAC, instead an ID
      rootDisk: "/dev/disk/by-id/nvme-SOMETHING-SOMETHING"
      hookRef: "armbian-rockchip64-edge"
      imageRef: "nanopct6lts-k8s"
      extraKernelCommandLine: "console=ttyS2,1500000"
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/nanopct6_tinkerbell_l3

    "blade3c":
      enabled: false
      arch: aarch64
      mac: "blade3c" # not really a MAC, instead an ID
      rootDisk: "/dev/disk/by-id/nvme-SOMETHING-SOMETHING"
      hookRef: "armbian-rk35xx-vendor"
      imageRef: "blade3-k8s"
      extraKernelCommandLine: "console=ttyS2,1500000"
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/nanopct6_tinkerbell_l3

    # Raspberry Pi 4B (bcm2711)
    "rpi":
      enabled: false
      arch: aarch64
      mac: "rpi"
      rootDisk: "/dev/disk/by-id/ata-2105_naa.5000000000000001"
      hookRef: "armbian-bcm2711-current"
      imageRef: "rpi4b-k8s"
      extraKernelCommandLine: "console=tty1 console=ttyAMA0,115200 loglevel=7" # Last console defined "wins", thus use tty1 last if no serial console
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/rpi4b_tinkerbell_l3

    "vm-amd64":
      enabled: false
      arch: x86_64
      mac: "vm-amd64"
      rootDisk: "/dev/nvme0n1"
      hookRef: "default-hook-amd64"
      imageRef: "amd64-k8s"
      extraKernelCommandLine: "console=ttyS0"
      # userData is just standard cloud-init, thus supports #cloud-config and #include etc.
      # Attention: if ever ran, this gives rpardini root access to your machine. Use your own scripts;
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/base

    "vm-arm64":
      enabled: false
      arch: aarch64
      mac: "vm-arm64"
      rootDisk: "/dev/nvme0n1"
      hookRef: "default-hook-aarch64"
      imageRef: "arm64-k8s"
      extraKernelCommandLine: "console=ttyAMA0"
      ipv4:
        address: 192.168.66.10 # not true, its just the host running the VM
      # userData is just standard cloud-init, thus supports #cloud-config and #include etc.
      # Attention: if ever ran, this gives rpardini root access to your machine. Use your own scripts;
      userData: |
        #include https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/base
